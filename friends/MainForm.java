/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package friends;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import javax.swing.JOptionPane;

/**
 *
 * @author Usuario
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form Form
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        TxtName = new javax.swing.JTextField();
        TxtNumber = new javax.swing.JTextField();
        BtnCreate = new javax.swing.JButton();
        BtnRead = new javax.swing.JButton();
        BtnUpdate = new javax.swing.JButton();
        BtnDelete = new javax.swing.JButton();
        BtnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Name");

        jLabel2.setText("Number");

        BtnCreate.setText("Create");
        BtnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCreateActionPerformed(evt);
            }
        });

        BtnRead.setText("Read");
        BtnRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnReadActionPerformed(evt);
            }
        });

        BtnUpdate.setText("Update");
        BtnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnUpdateActionPerformed(evt);
            }
        });

        BtnDelete.setText("Delete");
        BtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDeleteActionPerformed(evt);
            }
        });

        BtnClear.setText("Clear");
        BtnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BtnCreate)
                        .addGap(18, 18, 18)
                        .addComponent(BtnRead)
                        .addGap(18, 18, 18)
                        .addComponent(BtnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(BtnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(BtnClear))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TxtName)
                            .addComponent(TxtNumber))))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(TxtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(TxtNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(88, 88, 88)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnCreate)
                    .addComponent(BtnRead)
                    .addComponent(BtnUpdate)
                    .addComponent(BtnDelete)
                    .addComponent(BtnClear))
                .addContainerGap(92, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDeleteActionPerformed
        try {
            // Get the name of the contact to be updated
            // from the Command line argument
            String newName = TxtName.getText();

            String nameNumberString;
            String name;
            int index;

            // Using file pointer creating the file.
            File file = new File("friendsContact.txt");

            if (!file.exists()) {

                    // Create a new file if not exists.
                    file.createNewFile();
            }

            // Opening file in reading and write mode.
            RandomAccessFile raf
                    = new RandomAccessFile(file, "rw");
            boolean found = false;

            // Checking whether the name of contact exists.
            // getFilePointer() give the current offset
            // value from start of the file.
            while (raf.getFilePointer() < raf.length()) {

                    // reading line from the file.
                    nameNumberString = raf.readLine();

                    // splitting the string to get name and
                    // number
                    String[] lineSplit
                            = nameNumberString.split("!");

                    // separating name and number.
                    name = lineSplit[0];

                    // if condition to find existence of record.
                    if (name.equals(newName)) {
                            found = true;
                            break;
                    }
            }

            // Delete the contact if record exists.
            if (found == true) {

                    // Creating a temporary file
                    // with file pointer as tmpFile.
                    File tmpFile = new File("temp.txt");

                    // Opening this temporary file
                    // in ReadWrite Mode
                    RandomAccessFile tmpraf = new RandomAccessFile(tmpFile, "rw");

                    // Set file pointer to start
                    raf.seek(0);

                    // Traversing the friendsContact.txt file
                    while (raf.getFilePointer()< raf.length()) {

                            // Reading the contact from the file
                            nameNumberString = raf.readLine();

                            index = nameNumberString.indexOf('!');
                            name = nameNumberString.substring(0, index);

                            // Check if the fetched contact
                            // is the one to be deleted
                            if (name.equals(newName)) {

                                    // Skip inserting this contact
                                    // into the temporary file
                                    continue;
                            }

                            // Add this contact in the temporary
                            // file
                            tmpraf.writeBytes(nameNumberString);

                            // Add the line separator in the
                            // temporary file
                            tmpraf.writeBytes(System.lineSeparator());
                    }

                    // The contact has been deleted now
                    // So copy the updated content from
                    // the temporary file to original file.

                    // Set both files pointers to start
                    raf.seek(0);
                    tmpraf.seek(0);

                    // Copy the contents from
                    // the temporary file to original file.
                    while (tmpraf.getFilePointer() < tmpraf.length()) {
                            raf.writeBytes(tmpraf.readLine());
                            raf.writeBytes(System.lineSeparator());
                    }

                    // Set the length of the original file
                    // to that of temporary.
                    raf.setLength(tmpraf.length());

                    // Closing the resources.
                    tmpraf.close();
                    raf.close();

                    // Deleting the temporary file
                    tmpFile.delete();

                    JOptionPane.showMessageDialog(null, "Friend deleted.", "Information_message", JOptionPane.INFORMATION_MESSAGE);
            }

            // The contact to be deleted
            // could not be found
            else {

                    // Closing the resources.
                    raf.close();

                    // Print the message
                    JOptionPane.showMessageDialog(null, " Input name" + " does not exists. ", "Information_message", JOptionPane.INFORMATION_MESSAGE);
            }
        }

        catch (IOException ioe) {
                JOptionPane.showMessageDialog(null, ioe, "Information_message", JOptionPane.INFORMATION_MESSAGE);
                
        }
    }//GEN-LAST:event_BtnDeleteActionPerformed

    private void BtnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCreateActionPerformed
        try {
            String nameNumberString;
            String newName = TxtName.getText();
            long newNumber = Long.parseLong(TxtNumber.getText());
            String name;
            long number;

            // Using file pointer creating the file.
            File file = new File("friendsContact.txt");

            if (!file.exists()) {

                    // Create a new file if not exists.
                    file.createNewFile();
            }

            // Opening file in reading and write mode.

            RandomAccessFile raf = new RandomAccessFile(file, "rw");
            boolean found = false;

            // Checking whether the name
            // of contact already exists.
            // getFilePointer() give the current offset
            // value from start of the file.
            while (raf.getFilePointer() < raf.length()) {

                    // reading line from the file.
                    nameNumberString = raf.readLine();

                    // splitting the string to get name and
                    // number
                    String[] lineSplit
                            = nameNumberString.split("!");

                    // separating name and number.
                    name = lineSplit[0];
                    number = Long.parseLong(lineSplit[1]);

                    // if condition to find existence of record.
                    if (name.equals(newName) || number == newNumber) {
                            found = true;
                            break;
                    }
            }

            if (found == false) {

                    // Enter the if block when a record
                    // is not already present in the file.
                    nameNumberString = newName + "!" + String.valueOf(newNumber);

                    // writeBytes function to write a string
                    // as a sequence of bytes.
                    raf.writeBytes(nameNumberString);

                    // To insert the next record in new line.
                    raf.writeBytes(System.lineSeparator());

                    // Print the message
                    JOptionPane.showMessageDialog(null, "Friend added.", "Information_message", JOptionPane.INFORMATION_MESSAGE);

                    // Closing the resources.
                    raf.close();
            }
            // The contact to be updated
            // could not be found
            else {

                    // Closing the resources.
                    raf.close();

                    // Print the message
                    JOptionPane.showMessageDialog(null, " Input name" + " already exists. ", "Information_message", JOptionPane.INFORMATION_MESSAGE);
                }
            }

            catch (IOException ioe) {

                    JOptionPane.showMessageDialog(null, ioe, "Error_message", JOptionPane.INFORMATION_MESSAGE);
                    
            }
            catch (NumberFormatException nef) {

                    JOptionPane.showMessageDialog(null, nef, "Error_message", JOptionPane.INFORMATION_MESSAGE);
            }
    }//GEN-LAST:event_BtnCreateActionPerformed

    private void BtnReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnReadActionPerformed
        try {

            String nameNumberString;
            String name;
            long number;
            String newName = TxtName.getText();

            // Using file pointer creating the file.
            File file = new File("friendsContact.txt");

            if (!file.exists()) {
                    // Create a new file if not exists.
                    file.createNewFile();
            }

            // Opening file in reading and write mode.
            RandomAccessFile raf = new RandomAccessFile(file, "rw");

            while (raf.getFilePointer() < raf.length()) {

                    // reading line from the file.
                    nameNumberString = raf.readLine();

                    // splitting the string to get name and
                    // number
                    String[] lineSplit = nameNumberString.split("!");

                    // separating name and number.
                    name = lineSplit[0];
                    number = Long.parseLong(lineSplit[1]);

                    if (name.equals(newName)){
                        TxtName.setText(newName);
                        TxtNumber.setText(String.valueOf(number));
                        
                    }
                }
        }

        catch (IOException ioe)
        {
                JOptionPane.showMessageDialog(null, ioe, "Error_message", JOptionPane.INFORMATION_MESSAGE);
        }
        catch (NumberFormatException nef)
        {
                JOptionPane.showMessageDialog(null, nef, "Error_message", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_BtnReadActionPerformed

    private void BtnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnUpdateActionPerformed
        try {

            String newName = TxtName.getText();

            long newNumber = Long.parseLong(TxtNumber.getText());

            String nameNumberString;
            String name;
            long number;
            int index;

            // Using file pointer creating the file.
            File file = new File("friendsContact.txt");

            if (!file.exists()) {

                    // Create a new file if not exists.
                    file.createNewFile();
            }

            // Opening file in reading and write mode.
            RandomAccessFile raf = new RandomAccessFile(file, "rw");
            boolean found = false;

            // Checking whether the name
            // of contact already exists.
            // getFilePointer() give the current offset
            // value from start of the file.
            while (raf.getFilePointer() < raf.length()) {

                    // reading line from the file.
                    nameNumberString = raf.readLine();

                    // splitting the string to get name and
                    // number
                    String[] lineSplit = nameNumberString.split("!");

                    // separating name and number.
                    name = lineSplit[0];
                    number = Long.parseLong(lineSplit[1]);

                    // if condition to find existence of record.
                    if (name.equals(newName) || number == newNumber) {
                            found = true;
                            break;
                    }
            }

            // Update the contact if record exists.
            if (found == true) {

                    // Creating a temporary file
                    // with file pointer as tmpFile.
                    File tmpFile = new File("temp.txt");

                    // Opening this temporary file
                    // in ReadWrite Mode
                    RandomAccessFile tmpraf = new RandomAccessFile(tmpFile, "rw");

                    // Set file pointer to start
                    raf.seek(0);

                    // Traversing the friendsContact.txt file
                    while (raf.getFilePointer() < raf.length()) {

                            // Reading the contact from the file
                            nameNumberString = raf.readLine();

                            index = nameNumberString.indexOf('!');
                            name = nameNumberString.substring(0, index);

                            // Check if the fetched contact
                            // is the one to be updated
                            if (name.equals(newName)) {

                                    // Update the number of this contact
                                    nameNumberString = name + "!" + String.valueOf(newNumber);
                            }

                            // Add this contact in the temporary
                            // file
                            tmpraf.writeBytes(nameNumberString);

                            // Add the line separator in the
                            // temporary file
                            tmpraf.writeBytes(
                                    System.lineSeparator());
                    }

                    // The contact has been updated now
                    // So copy the updated content from
                    // the temporary file to original file.

                    // Set both files pointers to start
                    raf.seek(0);
                    tmpraf.seek(0);

                    // Copy the contents from
                    // the temporary file to original file.
                    while (tmpraf.getFilePointer() < tmpraf.length()) {
                            raf.writeBytes(tmpraf.readLine());
                            raf.writeBytes(System.lineSeparator());
                    }

                    // Set the length of the original file
                    // to that of temporary.
                    raf.setLength(tmpraf.length());

                    // Closing the resources.
                    tmpraf.close();
                    raf.close();

                    // Deleting the temporary file
                    tmpFile.delete();

                    JOptionPane.showMessageDialog(null, " Friend updated. ", "Information_message", JOptionPane.INFORMATION_MESSAGE);
            }

            // The contact to be updated
            // could not be found
            else {

                    // Closing the resources.
                    raf.close();

                    // Print the message
                    JOptionPane.showMessageDialog(null, " Input name" + " does not exists. ", "Information_message", JOptionPane.INFORMATION_MESSAGE);
                    
                }
            }

            catch (IOException ioe) {
                    JOptionPane.showMessageDialog(null, ioe, "Error_message", JOptionPane.INFORMATION_MESSAGE);
            }

            catch (NumberFormatException nef) {
                    JOptionPane.showMessageDialog(null, nef, "Error_message", JOptionPane.INFORMATION_MESSAGE);
            }
    }//GEN-LAST:event_BtnUpdateActionPerformed

    private void BtnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnClearActionPerformed
        TxtName.setText("");
        TxtNumber.setText("");
    }//GEN-LAST:event_BtnClearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnClear;
    private javax.swing.JButton BtnCreate;
    private javax.swing.JButton BtnDelete;
    private javax.swing.JButton BtnRead;
    private javax.swing.JButton BtnUpdate;
    private javax.swing.JTextField TxtName;
    private javax.swing.JTextField TxtNumber;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
